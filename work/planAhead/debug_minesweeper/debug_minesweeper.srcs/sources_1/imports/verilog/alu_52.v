/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_52 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg z,
    output reg v,
    output reg n,
    output reg [15:0] out
  );
  
  
  
  wire [1-1:0] M_addMul_z;
  wire [1-1:0] M_addMul_v;
  wire [1-1:0] M_addMul_n;
  wire [16-1:0] M_addMul_out;
  reg [6-1:0] M_addMul_alufn;
  reg [16-1:0] M_addMul_a;
  reg [16-1:0] M_addMul_b;
  adderMul_75 addMul (
    .alufn(M_addMul_alufn),
    .a(M_addMul_a),
    .b(M_addMul_b),
    .z(M_addMul_z),
    .v(M_addMul_v),
    .n(M_addMul_n),
    .out(M_addMul_out)
  );
  
  wire [16-1:0] M_com_out;
  reg [6-1:0] M_com_alufn;
  reg [1-1:0] M_com_v;
  reg [1-1:0] M_com_z;
  reg [1-1:0] M_com_n;
  compare_76 com (
    .alufn(M_com_alufn),
    .v(M_com_v),
    .z(M_com_z),
    .n(M_com_n),
    .out(M_com_out)
  );
  
  wire [16-1:0] M_boole_out;
  reg [16-1:0] M_boole_a;
  reg [16-1:0] M_boole_b;
  reg [6-1:0] M_boole_alufn;
  bool_77 boole (
    .a(M_boole_a),
    .b(M_boole_b),
    .alufn(M_boole_alufn),
    .out(M_boole_out)
  );
  
  wire [16-1:0] M_shifter_out;
  reg [16-1:0] M_shifter_a;
  reg [16-1:0] M_shifter_b;
  reg [6-1:0] M_shifter_alufn;
  shift_78 shifter (
    .a(M_shifter_a),
    .b(M_shifter_b),
    .alufn(M_shifter_alufn),
    .out(M_shifter_out)
  );
  
  always @* begin
    M_addMul_a = a;
    M_addMul_b = b;
    M_addMul_alufn = alufn;
    M_com_v = M_addMul_v;
    M_com_n = M_addMul_n;
    M_com_z = M_addMul_z;
    M_com_alufn = alufn;
    M_boole_a = a;
    M_boole_b = b;
    M_boole_alufn = alufn;
    M_shifter_a = a;
    M_shifter_b = b;
    M_shifter_alufn = alufn;
    
    case (alufn[4+1-:2])
      2'h0: begin
        out = M_addMul_out;
      end
      2'h1: begin
        out = M_boole_out;
      end
      2'h2: begin
        out = M_shifter_out;
      end
      2'h3: begin
        out = M_com_out;
      end
      default: begin
        out = 1'h0;
      end
    endcase
    z = M_addMul_z;
    n = M_addMul_n;
    v = M_addMul_v;
  end
endmodule
