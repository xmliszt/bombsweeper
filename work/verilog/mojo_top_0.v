/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input btnr0c0,
    input btnr0c1,
    input btnr0c2,
    input btnr0c3,
    input btnr1c0,
    input btnr1c1,
    input btnr1c2,
    input btnr1c3,
    input btnr2c0,
    input btnr2c1,
    input btnr2c2,
    input btnr2c3,
    input btnr3c0,
    input btnr3c1,
    input btnr3c2,
    input btnr3c3,
    output reg ledr0c0R,
    output reg ledr0c0G,
    output reg ledr0c0B,
    output reg ledr0c1R,
    output reg ledr0c1G,
    output reg ledr0c1B,
    output reg ledr0c2R,
    output reg ledr0c2G,
    output reg ledr0c2B,
    output reg ledr0c3R,
    output reg ledr0c3G,
    output reg ledr0c3B,
    output reg ledr1c0R,
    output reg ledr1c0G,
    output reg ledr1c0B,
    output reg ledr1c1R,
    output reg ledr1c1G,
    output reg ledr1c1B,
    output reg ledr1c2R,
    output reg ledr1c2G,
    output reg ledr1c2B,
    output reg ledr1c3R,
    output reg ledr1c3G,
    output reg ledr1c3B,
    output reg ledr2c0R,
    output reg ledr2c0G,
    output reg ledr2c0B,
    output reg ledr2c1R,
    output reg ledr2c1G,
    output reg ledr2c1B,
    output reg ledr2c2R,
    output reg ledr2c2G,
    output reg ledr2c2B,
    output reg ledr2c3R,
    output reg ledr2c3G,
    output reg ledr2c3B,
    output reg ledr3c0R,
    output reg ledr3c0G,
    output reg ledr3c0B,
    output reg ledr3c1R,
    output reg ledr3c1G,
    output reg ledr3c1B,
    output reg ledr3c2R,
    output reg ledr3c2G,
    output reg ledr3c2B,
    output reg ledr3c3R,
    output reg ledr3c3G,
    output reg ledr3c3B
  );
  
  
  
  reg rst;
  
  reg pn_gen_rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_det00_out;
  reg [1-1:0] M_edge_det00_in;
  edge_detector_2 edge_det00 (
    .clk(clk),
    .in(M_edge_det00_in),
    .out(M_edge_det00_out)
  );
  wire [1-1:0] M_btn_cond00_out;
  reg [1-1:0] M_btn_cond00_in;
  button_conditioner_3 btn_cond00 (
    .clk(clk),
    .in(M_btn_cond00_in),
    .out(M_btn_cond00_out)
  );
  wire [1-1:0] M_edge_det01_out;
  reg [1-1:0] M_edge_det01_in;
  edge_detector_2 edge_det01 (
    .clk(clk),
    .in(M_edge_det01_in),
    .out(M_edge_det01_out)
  );
  wire [1-1:0] M_btn_cond01_out;
  reg [1-1:0] M_btn_cond01_in;
  button_conditioner_3 btn_cond01 (
    .clk(clk),
    .in(M_btn_cond01_in),
    .out(M_btn_cond01_out)
  );
  wire [1-1:0] M_edge_det02_out;
  reg [1-1:0] M_edge_det02_in;
  edge_detector_2 edge_det02 (
    .clk(clk),
    .in(M_edge_det02_in),
    .out(M_edge_det02_out)
  );
  wire [1-1:0] M_btn_cond02_out;
  reg [1-1:0] M_btn_cond02_in;
  button_conditioner_3 btn_cond02 (
    .clk(clk),
    .in(M_btn_cond02_in),
    .out(M_btn_cond02_out)
  );
  wire [1-1:0] M_edge_det03_out;
  reg [1-1:0] M_edge_det03_in;
  edge_detector_2 edge_det03 (
    .clk(clk),
    .in(M_edge_det03_in),
    .out(M_edge_det03_out)
  );
  wire [1-1:0] M_btn_cond03_out;
  reg [1-1:0] M_btn_cond03_in;
  button_conditioner_3 btn_cond03 (
    .clk(clk),
    .in(M_btn_cond03_in),
    .out(M_btn_cond03_out)
  );
  wire [1-1:0] M_edge_det10_out;
  reg [1-1:0] M_edge_det10_in;
  edge_detector_2 edge_det10 (
    .clk(clk),
    .in(M_edge_det10_in),
    .out(M_edge_det10_out)
  );
  wire [1-1:0] M_btn_cond10_out;
  reg [1-1:0] M_btn_cond10_in;
  button_conditioner_3 btn_cond10 (
    .clk(clk),
    .in(M_btn_cond10_in),
    .out(M_btn_cond10_out)
  );
  wire [1-1:0] M_edge_det11_out;
  reg [1-1:0] M_edge_det11_in;
  edge_detector_2 edge_det11 (
    .clk(clk),
    .in(M_edge_det11_in),
    .out(M_edge_det11_out)
  );
  wire [1-1:0] M_btn_cond11_out;
  reg [1-1:0] M_btn_cond11_in;
  button_conditioner_3 btn_cond11 (
    .clk(clk),
    .in(M_btn_cond11_in),
    .out(M_btn_cond11_out)
  );
  wire [1-1:0] M_edge_det12_out;
  reg [1-1:0] M_edge_det12_in;
  edge_detector_2 edge_det12 (
    .clk(clk),
    .in(M_edge_det12_in),
    .out(M_edge_det12_out)
  );
  wire [1-1:0] M_btn_cond12_out;
  reg [1-1:0] M_btn_cond12_in;
  button_conditioner_3 btn_cond12 (
    .clk(clk),
    .in(M_btn_cond12_in),
    .out(M_btn_cond12_out)
  );
  wire [1-1:0] M_edge_det13_out;
  reg [1-1:0] M_edge_det13_in;
  edge_detector_2 edge_det13 (
    .clk(clk),
    .in(M_edge_det13_in),
    .out(M_edge_det13_out)
  );
  wire [1-1:0] M_btn_cond13_out;
  reg [1-1:0] M_btn_cond13_in;
  button_conditioner_3 btn_cond13 (
    .clk(clk),
    .in(M_btn_cond13_in),
    .out(M_btn_cond13_out)
  );
  wire [1-1:0] M_edge_det20_out;
  reg [1-1:0] M_edge_det20_in;
  edge_detector_2 edge_det20 (
    .clk(clk),
    .in(M_edge_det20_in),
    .out(M_edge_det20_out)
  );
  wire [1-1:0] M_btn_cond20_out;
  reg [1-1:0] M_btn_cond20_in;
  button_conditioner_3 btn_cond20 (
    .clk(clk),
    .in(M_btn_cond20_in),
    .out(M_btn_cond20_out)
  );
  wire [1-1:0] M_edge_det21_out;
  reg [1-1:0] M_edge_det21_in;
  edge_detector_2 edge_det21 (
    .clk(clk),
    .in(M_edge_det21_in),
    .out(M_edge_det21_out)
  );
  wire [1-1:0] M_btn_cond21_out;
  reg [1-1:0] M_btn_cond21_in;
  button_conditioner_3 btn_cond21 (
    .clk(clk),
    .in(M_btn_cond21_in),
    .out(M_btn_cond21_out)
  );
  wire [1-1:0] M_edge_det22_out;
  reg [1-1:0] M_edge_det22_in;
  edge_detector_2 edge_det22 (
    .clk(clk),
    .in(M_edge_det22_in),
    .out(M_edge_det22_out)
  );
  wire [1-1:0] M_btn_cond22_out;
  reg [1-1:0] M_btn_cond22_in;
  button_conditioner_3 btn_cond22 (
    .clk(clk),
    .in(M_btn_cond22_in),
    .out(M_btn_cond22_out)
  );
  wire [1-1:0] M_edge_det23_out;
  reg [1-1:0] M_edge_det23_in;
  edge_detector_2 edge_det23 (
    .clk(clk),
    .in(M_edge_det23_in),
    .out(M_edge_det23_out)
  );
  wire [1-1:0] M_btn_cond23_out;
  reg [1-1:0] M_btn_cond23_in;
  button_conditioner_3 btn_cond23 (
    .clk(clk),
    .in(M_btn_cond23_in),
    .out(M_btn_cond23_out)
  );
  wire [1-1:0] M_edge_det30_out;
  reg [1-1:0] M_edge_det30_in;
  edge_detector_2 edge_det30 (
    .clk(clk),
    .in(M_edge_det30_in),
    .out(M_edge_det30_out)
  );
  wire [1-1:0] M_btn_cond30_out;
  reg [1-1:0] M_btn_cond30_in;
  button_conditioner_3 btn_cond30 (
    .clk(clk),
    .in(M_btn_cond30_in),
    .out(M_btn_cond30_out)
  );
  wire [1-1:0] M_edge_det31_out;
  reg [1-1:0] M_edge_det31_in;
  edge_detector_2 edge_det31 (
    .clk(clk),
    .in(M_edge_det31_in),
    .out(M_edge_det31_out)
  );
  wire [1-1:0] M_btn_cond31_out;
  reg [1-1:0] M_btn_cond31_in;
  button_conditioner_3 btn_cond31 (
    .clk(clk),
    .in(M_btn_cond31_in),
    .out(M_btn_cond31_out)
  );
  wire [1-1:0] M_edge_det32_out;
  reg [1-1:0] M_edge_det32_in;
  edge_detector_2 edge_det32 (
    .clk(clk),
    .in(M_edge_det32_in),
    .out(M_edge_det32_out)
  );
  wire [1-1:0] M_btn_cond32_out;
  reg [1-1:0] M_btn_cond32_in;
  button_conditioner_3 btn_cond32 (
    .clk(clk),
    .in(M_btn_cond32_in),
    .out(M_btn_cond32_out)
  );
  wire [1-1:0] M_edge_det33_out;
  reg [1-1:0] M_edge_det33_in;
  edge_detector_2 edge_det33 (
    .clk(clk),
    .in(M_edge_det33_in),
    .out(M_edge_det33_out)
  );
  wire [1-1:0] M_btn_cond33_out;
  reg [1-1:0] M_btn_cond33_in;
  button_conditioner_3 btn_cond33 (
    .clk(clk),
    .in(M_btn_cond33_in),
    .out(M_btn_cond33_out)
  );
  reg [31:0] M_seed_d, M_seed_q = 1'h0;
  reg [15:0] M_score_d, M_score_q = 1'h0;
  reg [15:0] M_score_display_d, M_score_display_q = 1'h0;
  wire [32-1:0] M_random_generator_num;
  reg [1-1:0] M_random_generator_rst;
  reg [1-1:0] M_random_generator_next;
  reg [32-1:0] M_random_generator_seed;
  pn_gen_34 random_generator (
    .clk(clk),
    .rst(M_random_generator_rst),
    .next(M_random_generator_next),
    .seed(M_random_generator_seed),
    .num(M_random_generator_num)
  );
  wire [1-1:0] M_btnDeb00_btn_out;
  reg [1-1:0] M_btnDeb00_btn_in;
  btnDebouncer_35 btnDeb00 (
    .clk(clk),
    .rst(rst),
    .btn_in(M_btnDeb00_btn_in),
    .btn_out(M_btnDeb00_btn_out)
  );
  wire [1-1:0] M_btnDeb01_btn_out;
  reg [1-1:0] M_btnDeb01_btn_in;
  btnDebouncer_35 btnDeb01 (
    .clk(clk),
    .rst(rst),
    .btn_in(M_btnDeb01_btn_in),
    .btn_out(M_btnDeb01_btn_out)
  );
  wire [1-1:0] M_btnDeb02_btn_out;
  reg [1-1:0] M_btnDeb02_btn_in;
  btnDebouncer_35 btnDeb02 (
    .clk(clk),
    .rst(rst),
    .btn_in(M_btnDeb02_btn_in),
    .btn_out(M_btnDeb02_btn_out)
  );
  wire [1-1:0] M_btnDeb03_btn_out;
  reg [1-1:0] M_btnDeb03_btn_in;
  btnDebouncer_35 btnDeb03 (
    .clk(clk),
    .rst(rst),
    .btn_in(M_btnDeb03_btn_in),
    .btn_out(M_btnDeb03_btn_out)
  );
  wire [1-1:0] M_btnDeb10_btn_out;
  reg [1-1:0] M_btnDeb10_btn_in;
  btnDebouncer_35 btnDeb10 (
    .clk(clk),
    .rst(rst),
    .btn_in(M_btnDeb10_btn_in),
    .btn_out(M_btnDeb10_btn_out)
  );
  wire [1-1:0] M_btnDeb11_btn_out;
  reg [1-1:0] M_btnDeb11_btn_in;
  btnDebouncer_35 btnDeb11 (
    .clk(clk),
    .rst(rst),
    .btn_in(M_btnDeb11_btn_in),
    .btn_out(M_btnDeb11_btn_out)
  );
  wire [1-1:0] M_btnDeb12_btn_out;
  reg [1-1:0] M_btnDeb12_btn_in;
  btnDebouncer_35 btnDeb12 (
    .clk(clk),
    .rst(rst),
    .btn_in(M_btnDeb12_btn_in),
    .btn_out(M_btnDeb12_btn_out)
  );
  wire [1-1:0] M_btnDeb13_btn_out;
  reg [1-1:0] M_btnDeb13_btn_in;
  btnDebouncer_35 btnDeb13 (
    .clk(clk),
    .rst(rst),
    .btn_in(M_btnDeb13_btn_in),
    .btn_out(M_btnDeb13_btn_out)
  );
  wire [1-1:0] M_btnDeb20_btn_out;
  reg [1-1:0] M_btnDeb20_btn_in;
  btnDebouncer_35 btnDeb20 (
    .clk(clk),
    .rst(rst),
    .btn_in(M_btnDeb20_btn_in),
    .btn_out(M_btnDeb20_btn_out)
  );
  wire [1-1:0] M_btnDeb21_btn_out;
  reg [1-1:0] M_btnDeb21_btn_in;
  btnDebouncer_35 btnDeb21 (
    .clk(clk),
    .rst(rst),
    .btn_in(M_btnDeb21_btn_in),
    .btn_out(M_btnDeb21_btn_out)
  );
  wire [1-1:0] M_btnDeb22_btn_out;
  reg [1-1:0] M_btnDeb22_btn_in;
  btnDebouncer_35 btnDeb22 (
    .clk(clk),
    .rst(rst),
    .btn_in(M_btnDeb22_btn_in),
    .btn_out(M_btnDeb22_btn_out)
  );
  wire [1-1:0] M_btnDeb23_btn_out;
  reg [1-1:0] M_btnDeb23_btn_in;
  btnDebouncer_35 btnDeb23 (
    .clk(clk),
    .rst(rst),
    .btn_in(M_btnDeb23_btn_in),
    .btn_out(M_btnDeb23_btn_out)
  );
  wire [1-1:0] M_btnDeb30_btn_out;
  reg [1-1:0] M_btnDeb30_btn_in;
  btnDebouncer_35 btnDeb30 (
    .clk(clk),
    .rst(rst),
    .btn_in(M_btnDeb30_btn_in),
    .btn_out(M_btnDeb30_btn_out)
  );
  wire [1-1:0] M_btnDeb31_btn_out;
  reg [1-1:0] M_btnDeb31_btn_in;
  btnDebouncer_35 btnDeb31 (
    .clk(clk),
    .rst(rst),
    .btn_in(M_btnDeb31_btn_in),
    .btn_out(M_btnDeb31_btn_out)
  );
  wire [1-1:0] M_btnDeb32_btn_out;
  reg [1-1:0] M_btnDeb32_btn_in;
  btnDebouncer_35 btnDeb32 (
    .clk(clk),
    .rst(rst),
    .btn_in(M_btnDeb32_btn_in),
    .btn_out(M_btnDeb32_btn_out)
  );
  wire [1-1:0] M_btnDeb33_btn_out;
  reg [1-1:0] M_btnDeb33_btn_in;
  btnDebouncer_35 btnDeb33 (
    .clk(clk),
    .rst(rst),
    .btn_in(M_btnDeb33_btn_in),
    .btn_out(M_btnDeb33_btn_out)
  );
  reg [15:0] M_index_counter_d, M_index_counter_q = 1'h0;
  reg [3:0] M_seq_counter_d, M_seq_counter_q = 1'h0;
  reg [15:0] M_prev_btn_list_d, M_prev_btn_list_q = 1'h0;
  reg [15:0] M_temp_reg_d, M_temp_reg_q = 1'h0;
  reg [15:0] M_temp_reg2_d, M_temp_reg2_q = 1'h0;
  reg [15:0] M_debug_reg_d, M_debug_reg_q = 1'h0;
  reg [15:0] M_debug_reg_2_d, M_debug_reg_2_q = 1'h0;
  reg [47:0] M_temp_led_data_d, M_temp_led_data_q = 1'h0;
  reg [15:0] M_btn_status_d, M_btn_status_q = 1'h0;
  reg [1:0] M_difficulty_d, M_difficulty_q = 1'h0;
  reg [2:0] M_bomb_count_d, M_bomb_count_q = 1'h0;
  reg M_auto_manual_indicator_d, M_auto_manual_indicator_q = 1'h0;
  wire [16-1:0] M_regfile_radata;
  wire [16-1:0] M_regfile_rbdata;
  reg [4-1:0] M_regfile_ra;
  reg [4-1:0] M_regfile_rb;
  reg [1-1:0] M_regfile_we;
  reg [16-1:0] M_regfile_wd;
  reg [4-1:0] M_regfile_wa;
  regfile_51 regfile (
    .clk(clk),
    .rst(rst),
    .ra(M_regfile_ra),
    .rb(M_regfile_rb),
    .we(M_regfile_we),
    .wd(M_regfile_wd),
    .wa(M_regfile_wa),
    .radata(M_regfile_radata),
    .rbdata(M_regfile_rbdata)
  );
  localparam MENU_state = 5'd0;
  localparam WIN_state = 5'd1;
  localparam LOSS_state = 5'd2;
  localparam AUTO_state = 5'd3;
  localparam MANUAL_state = 5'd4;
  localparam CHECK_state = 5'd5;
  localparam READ_state = 5'd6;
  localparam READ0SEQ_state = 5'd7;
  localparam READ1SEQ_state = 5'd8;
  localparam READ2SEQ_state = 5'd9;
  localparam READ3SEQ_state = 5'd10;
  localparam READ4SEQ_state = 5'd11;
  localparam READ5SEQ_state = 5'd12;
  localparam READ6SEQ_state = 5'd13;
  localparam READ7SEQ_state = 5'd14;
  localparam READ8SEQ_state = 5'd15;
  localparam READ9SEQ_state = 5'd16;
  localparam READ10SEQ_state = 5'd17;
  localparam READ11SEQ_state = 5'd18;
  localparam READ12SEQ_state = 5'd19;
  localparam READ13SEQ_state = 5'd20;
  localparam READ14SEQ_state = 5'd21;
  localparam READ15SEQ_state = 5'd22;
  localparam WRITE_state = 5'd23;
  localparam GAME_state = 5'd24;
  
  reg [4:0] M_state_d, M_state_q = MENU_state;
  
  reg [15:0] tempsig16;
  
  reg [15:0] tempsig16_2;
  
  reg [3:0] tempsig4;
  
  reg tempsig;
  
  reg [15:0] debug_sig;
  
  reg [1:0] led_color;
  
  reg [47:0] led_display;
  
  reg btn00;
  
  reg btn01;
  
  reg btn02;
  
  reg btn03;
  
  reg btn10;
  
  reg btn11;
  
  reg btn12;
  
  reg btn13;
  
  reg btn20;
  
  reg btn21;
  
  reg btn22;
  
  reg btn23;
  
  reg btn30;
  
  reg btn31;
  
  reg btn32;
  
  reg btn33;
  
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  wire [16-1:0] M_alu_out;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  alu_52 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n),
    .out(M_alu_out)
  );
  
  wire [16-1:0] M_asel_out;
  reg [1-1:0] M_asel_asel_signal;
  reg [16-1:0] M_asel_cu_data;
  reg [16-1:0] M_asel_ra_data;
  asel_53 asel (
    .asel_signal(M_asel_asel_signal),
    .cu_data(M_asel_cu_data),
    .ra_data(M_asel_ra_data),
    .out(M_asel_out)
  );
  
  wire [16-1:0] M_bsel_bsel_out;
  reg [1-1:0] M_bsel_bsel_signal;
  reg [16-1:0] M_bsel_rb;
  reg [16-1:0] M_bsel_cu_data;
  bsel_54 bsel (
    .bsel_signal(M_bsel_bsel_signal),
    .rb(M_bsel_rb),
    .cu_data(M_bsel_cu_data),
    .bsel_out(M_bsel_bsel_out)
  );
  
  wire [16-1:0] M_wdsel_wdsel_out;
  reg [1-1:0] M_wdsel_wdsel_signal;
  reg [16-1:0] M_wdsel_a;
  reg [16-1:0] M_wdsel_b;
  wdsel_55 wdsel (
    .wdsel_signal(M_wdsel_wdsel_signal),
    .a(M_wdsel_a),
    .b(M_wdsel_b),
    .wdsel_out(M_wdsel_wdsel_out)
  );
  
  wire [16-1:0] M_control_unit_relay_crrt_btn_list;
  wire [4-1:0] M_control_unit_rb_out;
  wire [4-1:0] M_control_unit_ra_out;
  wire [4-1:0] M_control_unit_wa_out;
  wire [16-1:0] M_control_unit_asel_b_out;
  wire [16-1:0] M_control_unit_bsel_b_out;
  wire [16-1:0] M_control_unit_wdsel_b_out;
  wire [1-1:0] M_control_unit_bomb_signal;
  reg [16-1:0] M_control_unit_custom_signal_a;
  reg [16-1:0] M_control_unit_custom_signal_b;
  reg [32-1:0] M_control_unit_pn_gen_num;
  reg [16-1:0] M_control_unit_crrt_btn_list;
  reg [16-1:0] M_control_unit_prev_btn_list;
  reg [16-1:0] M_control_unit_radata_in;
  reg [4-1:0] M_control_unit_reg_addresses_in_a;
  reg [4-1:0] M_control_unit_reg_addresses_in_b;
  reg [2-1:0] M_control_unit_ra_select_signal;
  reg [2-1:0] M_control_unit_rb_select_signal;
  reg [2-1:0] M_control_unit_asel_input_select_signal;
  reg [2-1:0] M_control_unit_bsel_input_select_signal;
  reg [1-1:0] M_control_unit_wdsel_input_select_signal;
  reg [2-1:0] M_control_unit_wa_select_signal;
  reg [4-1:0] M_control_unit_custom_address;
  control_unit_56 control_unit (
    .custom_signal_a(M_control_unit_custom_signal_a),
    .custom_signal_b(M_control_unit_custom_signal_b),
    .pn_gen_num(M_control_unit_pn_gen_num),
    .crrt_btn_list(M_control_unit_crrt_btn_list),
    .prev_btn_list(M_control_unit_prev_btn_list),
    .radata_in(M_control_unit_radata_in),
    .reg_addresses_in_a(M_control_unit_reg_addresses_in_a),
    .reg_addresses_in_b(M_control_unit_reg_addresses_in_b),
    .ra_select_signal(M_control_unit_ra_select_signal),
    .rb_select_signal(M_control_unit_rb_select_signal),
    .asel_input_select_signal(M_control_unit_asel_input_select_signal),
    .bsel_input_select_signal(M_control_unit_bsel_input_select_signal),
    .wdsel_input_select_signal(M_control_unit_wdsel_input_select_signal),
    .wa_select_signal(M_control_unit_wa_select_signal),
    .custom_address(M_control_unit_custom_address),
    .relay_crrt_btn_list(M_control_unit_relay_crrt_btn_list),
    .rb_out(M_control_unit_rb_out),
    .ra_out(M_control_unit_ra_out),
    .wa_out(M_control_unit_wa_out),
    .asel_b_out(M_control_unit_asel_b_out),
    .bsel_b_out(M_control_unit_bsel_b_out),
    .wdsel_b_out(M_control_unit_wdsel_b_out),
    .bomb_signal(M_control_unit_bomb_signal)
  );
  
  wire [4-1:0] M_reg_addresses_out_a;
  wire [4-1:0] M_reg_addresses_out_b;
  reg [4-1:0] M_reg_addresses_index_a;
  reg [4-1:0] M_reg_addresses_index_b;
  reg_addresses_57 reg_addresses (
    .index_a(M_reg_addresses_index_a),
    .index_b(M_reg_addresses_index_b),
    .out_a(M_reg_addresses_out_a),
    .out_b(M_reg_addresses_out_b)
  );
  
  wire [16-1:0] M_btn_list_btn_list;
  reg [1-1:0] M_btn_list_btnr0c0;
  reg [1-1:0] M_btn_list_btnr0c1;
  reg [1-1:0] M_btn_list_btnr0c2;
  reg [1-1:0] M_btn_list_btnr0c3;
  reg [1-1:0] M_btn_list_btnr1c0;
  reg [1-1:0] M_btn_list_btnr1c1;
  reg [1-1:0] M_btn_list_btnr1c2;
  reg [1-1:0] M_btn_list_btnr1c3;
  reg [1-1:0] M_btn_list_btnr2c0;
  reg [1-1:0] M_btn_list_btnr2c1;
  reg [1-1:0] M_btn_list_btnr2c2;
  reg [1-1:0] M_btn_list_btnr2c3;
  reg [1-1:0] M_btn_list_btnr3c0;
  reg [1-1:0] M_btn_list_btnr3c1;
  reg [1-1:0] M_btn_list_btnr3c2;
  reg [1-1:0] M_btn_list_btnr3c3;
  btn_list_58 btn_list (
    .btnr0c0(M_btn_list_btnr0c0),
    .btnr0c1(M_btn_list_btnr0c1),
    .btnr0c2(M_btn_list_btnr0c2),
    .btnr0c3(M_btn_list_btnr0c3),
    .btnr1c0(M_btn_list_btnr1c0),
    .btnr1c1(M_btn_list_btnr1c1),
    .btnr1c2(M_btn_list_btnr1c2),
    .btnr1c3(M_btn_list_btnr1c3),
    .btnr2c0(M_btn_list_btnr2c0),
    .btnr2c1(M_btn_list_btnr2c1),
    .btnr2c2(M_btn_list_btnr2c2),
    .btnr2c3(M_btn_list_btnr2c3),
    .btnr3c0(M_btn_list_btnr3c0),
    .btnr3c1(M_btn_list_btnr3c1),
    .btnr3c2(M_btn_list_btnr3c2),
    .btnr3c3(M_btn_list_btnr3c3),
    .btn_list(M_btn_list_btn_list)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_debug_reg_d = M_debug_reg_q;
    M_temp_reg_d = M_temp_reg_q;
    M_seed_d = M_seed_q;
    M_prev_btn_list_d = M_prev_btn_list_q;
    M_score_d = M_score_q;
    M_difficulty_d = M_difficulty_q;
    M_temp_reg2_d = M_temp_reg2_q;
    M_temp_led_data_d = M_temp_led_data_q;
    M_score_display_d = M_score_display_q;
    M_debug_reg_2_d = M_debug_reg_2_q;
    M_index_counter_d = M_index_counter_q;
    M_auto_manual_indicator_d = M_auto_manual_indicator_q;
    M_btn_status_d = M_btn_status_q;
    M_seq_counter_d = M_seq_counter_q;
    M_bomb_count_d = M_bomb_count_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    pn_gen_rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_seed_d = 22'h2d4cf0;
    ledr0c0R = 1'h0;
    ledr0c0G = 1'h0;
    ledr0c0B = 1'h0;
    ledr0c1R = 1'h0;
    ledr0c1G = 1'h0;
    ledr0c1B = 1'h0;
    ledr0c2R = 1'h0;
    ledr0c2G = 1'h0;
    ledr0c2B = 1'h0;
    ledr0c3R = 1'h0;
    ledr0c3G = 1'h0;
    ledr0c3B = 1'h0;
    ledr1c0R = 1'h0;
    ledr1c0G = 1'h0;
    ledr1c0B = 1'h0;
    ledr1c1R = 1'h0;
    ledr1c1G = 1'h0;
    ledr1c1B = 1'h0;
    ledr1c2R = 1'h0;
    ledr1c2G = 1'h0;
    ledr1c2B = 1'h0;
    ledr1c3R = 1'h0;
    ledr1c3G = 1'h0;
    ledr1c3B = 1'h0;
    ledr2c0R = 1'h0;
    ledr2c0G = 1'h0;
    ledr2c0B = 1'h0;
    ledr2c1R = 1'h0;
    ledr2c1G = 1'h0;
    ledr2c1B = 1'h0;
    ledr2c2R = 1'h0;
    ledr2c2G = 1'h0;
    ledr2c2B = 1'h0;
    ledr2c3R = 1'h0;
    ledr2c3G = 1'h0;
    ledr2c3B = 1'h0;
    ledr3c0R = 1'h0;
    ledr3c0G = 1'h0;
    ledr3c0B = 1'h0;
    ledr3c1R = 1'h0;
    ledr3c1G = 1'h0;
    ledr3c1B = 1'h0;
    ledr3c2R = 1'h0;
    ledr3c2G = 1'h0;
    ledr3c2B = 1'h0;
    ledr3c3R = 1'h0;
    ledr3c3G = 1'h0;
    ledr3c3B = 1'h0;
    M_btn_cond00_in = btnr0c0;
    M_edge_det00_in = M_btn_cond00_out;
    M_btnDeb00_btn_in = M_edge_det00_out;
    btn00 = M_btnDeb00_btn_out;
    M_btn_cond01_in = btnr0c1;
    M_edge_det01_in = M_btn_cond01_out;
    M_btnDeb01_btn_in = M_edge_det01_out;
    btn01 = M_btnDeb01_btn_out;
    M_btn_cond02_in = btnr0c2;
    M_edge_det02_in = M_btn_cond02_out;
    M_btnDeb02_btn_in = M_edge_det02_out;
    btn02 = M_btnDeb02_btn_out;
    M_btn_cond03_in = btnr0c3;
    M_edge_det03_in = M_btn_cond03_out;
    M_btnDeb03_btn_in = M_edge_det03_out;
    btn03 = M_btnDeb03_btn_out;
    M_btn_cond10_in = btnr1c0;
    M_edge_det10_in = M_btn_cond10_out;
    M_btnDeb10_btn_in = M_edge_det10_out;
    btn10 = M_btnDeb10_btn_out;
    M_btn_cond11_in = btnr1c1;
    M_edge_det11_in = M_btn_cond11_out;
    M_btnDeb11_btn_in = M_edge_det11_out;
    btn11 = M_btnDeb11_btn_out;
    M_btn_cond12_in = btnr1c2;
    M_edge_det12_in = M_btn_cond12_out;
    M_btnDeb12_btn_in = M_edge_det12_out;
    btn12 = M_btnDeb12_btn_out;
    M_btn_cond13_in = btnr1c3;
    M_edge_det13_in = M_btn_cond13_out;
    M_btnDeb13_btn_in = M_edge_det13_out;
    btn13 = M_btnDeb13_btn_out;
    M_btn_cond20_in = btnr2c0;
    M_edge_det20_in = M_btn_cond20_out;
    M_btnDeb20_btn_in = M_edge_det20_out;
    btn20 = M_btnDeb20_btn_out;
    M_btn_cond21_in = btnr2c1;
    M_edge_det21_in = M_btn_cond21_out;
    M_btnDeb21_btn_in = M_edge_det21_out;
    btn21 = M_btnDeb21_btn_out;
    M_btn_cond22_in = btnr2c2;
    M_edge_det22_in = M_btn_cond22_out;
    M_btnDeb22_btn_in = M_edge_det22_out;
    btn22 = M_btnDeb22_btn_out;
    M_btn_cond23_in = btnr2c3;
    M_edge_det23_in = M_btn_cond23_out;
    M_btnDeb23_btn_in = M_edge_det23_out;
    btn23 = M_btnDeb23_btn_out;
    M_btn_cond30_in = btnr3c0;
    M_edge_det30_in = M_btn_cond30_out;
    M_btnDeb30_btn_in = M_edge_det30_out;
    btn30 = M_btnDeb30_btn_out;
    M_btn_cond31_in = btnr3c1;
    M_edge_det31_in = M_btn_cond31_out;
    M_btnDeb31_btn_in = M_edge_det31_out;
    btn31 = M_btnDeb31_btn_out;
    M_btn_cond32_in = btnr3c2;
    M_edge_det32_in = M_btn_cond32_out;
    M_btnDeb32_btn_in = M_edge_det32_out;
    btn32 = M_btnDeb32_btn_out;
    M_btn_cond33_in = btnr3c3;
    M_edge_det33_in = M_btn_cond33_out;
    M_btnDeb33_btn_in = M_edge_det33_out;
    btn33 = M_btnDeb33_btn_out;
    M_btn_list_btnr0c0 = btn00;
    M_btn_list_btnr0c1 = btn01;
    M_btn_list_btnr0c2 = btn02;
    M_btn_list_btnr0c3 = btn03;
    M_btn_list_btnr1c0 = btn10;
    M_btn_list_btnr1c1 = btn11;
    M_btn_list_btnr1c2 = btn12;
    M_btn_list_btnr1c3 = btn13;
    M_btn_list_btnr2c0 = btn20;
    M_btn_list_btnr2c1 = btn21;
    M_btn_list_btnr2c2 = btn22;
    M_btn_list_btnr2c3 = btn23;
    M_btn_list_btnr3c0 = btn30;
    M_btn_list_btnr3c1 = btn31;
    M_btn_list_btnr3c2 = btn32;
    M_btn_list_btnr3c3 = btn33;
    M_random_generator_seed = M_seed_q;
    M_random_generator_next = 1'h0;
    M_random_generator_rst = pn_gen_rst;
    M_reg_addresses_index_a = 1'h0;
    M_reg_addresses_index_b = 1'h0;
    M_seq_counter_d = M_seq_counter_q;
    M_random_generator_seed = M_seed_q;
    M_random_generator_next = 1'h0;
    M_control_unit_reg_addresses_in_a = M_reg_addresses_out_a;
    M_control_unit_reg_addresses_in_b = M_reg_addresses_out_b;
    M_control_unit_crrt_btn_list = M_btn_list_btn_list;
    M_control_unit_prev_btn_list = M_prev_btn_list_q;
    M_control_unit_pn_gen_num = M_random_generator_num;
    M_control_unit_radata_in = M_regfile_radata;
    M_control_unit_ra_select_signal = 1'h0;
    M_control_unit_rb_select_signal = 1'h0;
    M_control_unit_wa_select_signal = 2'h0;
    M_control_unit_asel_input_select_signal = 2'h0;
    M_control_unit_wdsel_input_select_signal = 1'h0;
    M_control_unit_custom_address = 1'h0;
    M_control_unit_bsel_input_select_signal = 2'h0;
    M_control_unit_custom_signal_a = 1'h0;
    M_control_unit_custom_signal_b = 1'h0;
    M_prev_btn_list_d = M_prev_btn_list_q;
    M_seq_counter_d = M_seq_counter_q;
    M_debug_reg_d = M_debug_reg_q;
    M_debug_reg_2_d = M_debug_reg_2_q;
    M_index_counter_d = M_index_counter_q;
    M_temp_reg_d = M_temp_reg_q;
    M_temp_reg2_d = M_temp_reg2_q;
    M_regfile_wa = M_control_unit_wa_out;
    M_regfile_we = 1'h0;
    M_regfile_wd = M_wdsel_wdsel_out;
    M_regfile_ra = M_control_unit_ra_out;
    M_regfile_rb = M_control_unit_rb_out;
    M_alu_alufn = 5'h00;
    M_alu_a = M_asel_out;
    M_alu_b = M_bsel_bsel_out;
    M_bsel_cu_data = M_control_unit_bsel_b_out;
    M_bsel_bsel_signal = 1'h0;
    M_bsel_rb = M_regfile_rbdata;
    M_wdsel_wdsel_signal = 1'h0;
    M_wdsel_b = M_control_unit_wdsel_b_out;
    M_wdsel_a = M_alu_out;
    M_asel_cu_data = M_control_unit_asel_b_out;
    M_asel_asel_signal = 1'h0;
    M_asel_ra_data = M_regfile_radata;
    M_reg_addresses_index_b = 1'h0;
    M_reg_addresses_index_a = 1'h0;
    M_temp_led_data_d = M_temp_led_data_q;
    M_btn_status_d = M_btn_status_q;
    M_score_d = M_score_q;
    M_score_display_d = M_score_display_q;
    M_difficulty_d = M_difficulty_q;
    M_bomb_count_d = M_bomb_count_q;
    M_auto_manual_indicator_d = M_auto_manual_indicator_q;
    if (rst) begin
      M_seed_d = M_seed_q + 3'h5;
      M_score_d = 1'h0;
      M_score_display_d = 1'h0;
      pn_gen_rst = 1'h1;
    end
    
    case (M_state_q)
      MENU_state: begin
        tempsig16 = M_score_q;
        if (tempsig16 > 1'h0 && tempsig16 < 4'hc) begin
          M_alu_a = 16'h8000;
          M_alu_b = tempsig16 + 2'h3;
          M_alu_alufn = 6'h23;
          tempsig16_2 = M_alu_out;
          tempsig16 = M_score_display_q;
          tempsig16 = tempsig16 | tempsig16_2;
          M_score_display_d = tempsig16;
        end else begin
          if (tempsig16 > 4'hb) begin
            M_score_d = 1'h0;
            M_score_display_d = 1'h0;
            tempsig16 = 1'h0;
          end else begin
            tempsig16 = 16'h0000;
          end
        end
        ledr0c0B = tempsig16[0+0-:1];
        ledr0c1B = tempsig16[1+0-:1];
        ledr0c2B = tempsig16[2+0-:1];
        ledr0c3B = tempsig16[3+0-:1];
        ledr1c0B = tempsig16[4+0-:1];
        ledr1c1B = tempsig16[5+0-:1];
        ledr1c2B = tempsig16[6+0-:1];
        ledr1c3B = tempsig16[7+0-:1];
        ledr2c0B = tempsig16[8+0-:1];
        ledr2c1B = tempsig16[9+0-:1];
        ledr2c2B = tempsig16[10+0-:1];
        ledr2c3B = tempsig16[11+0-:1];
        ledr3c0R = 1'h1;
        ledr3c0G = 1'h1;
        ledr3c1B = 1'h1;
        ledr3c2B = 1'h1;
        ledr3c2R = 1'h1;
        ledr3c3G = 1'h1;
        if (btn30) begin
          M_difficulty_d = 1'h0;
          M_auto_manual_indicator_d = 1'h0;
          pn_gen_rst = 1'h1;
          M_state_d = AUTO_state;
        end else begin
          if (btn31) begin
            M_difficulty_d = 1'h1;
            M_auto_manual_indicator_d = 1'h0;
            pn_gen_rst = 1'h1;
            M_state_d = AUTO_state;
          end else begin
            if (btn32) begin
              M_difficulty_d = 2'h2;
              M_auto_manual_indicator_d = 1'h0;
              pn_gen_rst = 1'h1;
              M_state_d = AUTO_state;
            end else begin
              if (btn33) begin
                M_temp_reg_d = 16'hffff;
                M_auto_manual_indicator_d = 1'h1;
                M_temp_reg2_d = 1'h0;
                M_state_d = MANUAL_state;
              end else begin
                M_state_d = MENU_state;
              end
            end
          end
        end
      end
      WIN_state: begin
        if (btn33) begin
          rst = 1'h1;
          M_state_d = MENU_state;
        end else begin
          ledr0c0G = 1'h1;
          ledr0c1G = 1'h1;
          ledr0c2G = 1'h1;
          ledr0c3G = 1'h1;
          ledr1c0G = 1'h1;
          ledr1c1G = 1'h1;
          ledr1c2G = 1'h1;
          ledr1c3G = 1'h1;
          ledr2c0G = 1'h1;
          ledr2c1G = 1'h1;
          ledr2c2G = 1'h1;
          ledr2c3G = 1'h1;
          ledr3c0G = 1'h1;
          ledr3c1G = 1'h1;
          ledr3c2G = 1'h1;
          ledr3c3G = 1'h1;
          M_state_d = WIN_state;
        end
      end
      LOSS_state: begin
        if (btn33) begin
          rst = 1'h1;
          M_state_d = MENU_state;
        end else begin
          ledr0c0R = 1'h1;
          ledr0c1R = 1'h1;
          ledr0c2R = 1'h1;
          ledr0c3R = 1'h1;
          ledr1c0R = 1'h1;
          ledr1c1R = 1'h1;
          ledr1c2R = 1'h1;
          ledr1c3R = 1'h1;
          ledr2c0R = 1'h1;
          ledr2c1R = 1'h1;
          ledr2c2R = 1'h1;
          ledr2c3R = 1'h1;
          ledr3c0R = 1'h1;
          ledr3c1R = 1'h1;
          ledr3c2R = 1'h1;
          ledr3c3R = 1'h1;
          M_state_d = LOSS_state;
        end
      end
      MANUAL_state: begin
        if (btn00) begin
          M_reg_addresses_index_a = 1'h0;
          M_temp_reg_d = M_reg_addresses_out_a;
        end else begin
          if (btn01) begin
            M_reg_addresses_index_a = 1'h1;
            M_temp_reg_d = M_reg_addresses_out_a;
          end else begin
            if (btn02) begin
              M_reg_addresses_index_a = 2'h2;
              M_temp_reg_d = M_reg_addresses_out_a;
            end else begin
              if (btn03) begin
                M_reg_addresses_index_a = 2'h3;
                M_temp_reg_d = M_reg_addresses_out_a;
              end else begin
                if (btn10) begin
                  M_reg_addresses_index_a = 3'h4;
                  M_temp_reg_d = M_reg_addresses_out_a;
                end else begin
                  if (btn11) begin
                    M_reg_addresses_index_a = 3'h5;
                    M_temp_reg_d = M_reg_addresses_out_a;
                  end else begin
                    if (btn12) begin
                      M_reg_addresses_index_a = 3'h6;
                      M_temp_reg_d = M_reg_addresses_out_a;
                    end else begin
                      if (btn13) begin
                        M_reg_addresses_index_a = 3'h7;
                        M_temp_reg_d = M_reg_addresses_out_a;
                      end else begin
                        if (btn20) begin
                          M_reg_addresses_index_a = 4'h8;
                          M_temp_reg_d = M_reg_addresses_out_a;
                        end else begin
                          if (btn21) begin
                            M_reg_addresses_index_a = 4'h9;
                            M_temp_reg_d = M_reg_addresses_out_a;
                          end else begin
                            if (btn22) begin
                              M_reg_addresses_index_a = 4'ha;
                              M_temp_reg_d = M_reg_addresses_out_a;
                            end else begin
                              if (btn23) begin
                                M_reg_addresses_index_a = 4'hb;
                                M_temp_reg_d = M_reg_addresses_out_a;
                              end else begin
                                if (btn30) begin
                                  M_reg_addresses_index_a = 4'hc;
                                  M_temp_reg_d = M_reg_addresses_out_a;
                                end else begin
                                  if (btn31) begin
                                    M_reg_addresses_index_a = 4'hd;
                                    M_temp_reg_d = M_reg_addresses_out_a;
                                  end else begin
                                    if (btn32) begin
                                      M_reg_addresses_index_a = 4'he;
                                      M_temp_reg_d = M_reg_addresses_out_a;
                                    end else begin
                                      if (btn33) begin
                                        M_reg_addresses_index_a = 4'hf;
                                        M_temp_reg_d = M_reg_addresses_out_a;
                                      end else begin
                                        M_reg_addresses_index_a = M_temp_reg_q;
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        tempsig16 = M_temp_reg_q;
        if (tempsig16 == 16'hffff) begin
          tempsig16 = M_temp_reg2_q;
          ledr0c0R = tempsig16[0+0-:1];
          ledr0c1R = tempsig16[1+0-:1];
          ledr0c2R = tempsig16[2+0-:1];
          ledr0c3R = tempsig16[3+0-:1];
          ledr1c0R = tempsig16[4+0-:1];
          ledr1c1R = tempsig16[5+0-:1];
          ledr1c2R = tempsig16[6+0-:1];
          ledr1c3R = tempsig16[7+0-:1];
          ledr2c0R = tempsig16[8+0-:1];
          ledr2c1R = tempsig16[9+0-:1];
          ledr2c2R = tempsig16[10+0-:1];
          ledr2c3R = tempsig16[11+0-:1];
          ledr3c0R = tempsig16[12+0-:1];
          ledr3c1R = tempsig16[13+0-:1];
          ledr3c2R = tempsig16[14+0-:1];
          ledr3c3R = tempsig16[15+0-:1];
          M_state_d = MANUAL_state;
        end else begin
          tempsig4 = M_bomb_count_q;
          if (tempsig4 < 2'h3) begin
            M_control_unit_wa_select_signal = 2'h3;
            M_control_unit_custom_address = tempsig16;
            M_control_unit_wdsel_input_select_signal = 1'h0;
            M_wdsel_wdsel_signal = 1'h1;
            M_regfile_we = 1'h1;
            tempsig4 = M_reg_addresses_out_a;
            M_alu_a = 16'h0001;
            M_alu_b = tempsig4;
            M_alu_alufn = 6'h20;
            tempsig16 = M_alu_out | M_temp_reg2_q;
            M_temp_reg2_d = tempsig16;
            M_bomb_count_d = 1'h0;
            M_state_d = CHECK_state;
          end else begin
            M_bomb_count_d = 1'h0;
            M_state_d = READ_state;
          end
        end
      end
      AUTO_state: begin
        tempsig4 = M_difficulty_q;
        
        case (tempsig4)
          1'h0: begin
            tempsig16 = 1'h1;
          end
          1'h1: begin
            tempsig16 = 2'h2;
          end
          2'h2: begin
            tempsig16 = 2'h3;
          end
          default: begin
            tempsig16 = 1'h1;
          end
        endcase
        tempsig4 = M_bomb_count_q;
        if (tempsig4 < tempsig16) begin
          pn_gen_rst = 1'h1;
          M_random_generator_next = 1'h1;
          M_control_unit_wa_select_signal = 2'h0;
          M_regfile_we = 1'h1;
          M_control_unit_wdsel_input_select_signal = 1'h0;
          M_wdsel_wdsel_signal = 1'h1;
          M_bomb_count_d = 1'h0;
          M_state_d = CHECK_state;
        end else begin
          M_index_counter_d = 1'h0;
          M_seed_d = M_seed_q + 1'h1;
          M_bomb_count_d = 1'h0;
          M_state_d = READ_state;
        end
      end
      CHECK_state: begin
        if (M_index_counter_q > 4'hf) begin
          M_index_counter_d = 1'h0;
          tempsig = M_auto_manual_indicator_q;
          
          case (tempsig)
            1'h0: begin
              M_state_d = AUTO_state;
            end
            1'h1: begin
              M_temp_reg_d = 16'hffff;
              M_state_d = MANUAL_state;
            end
          endcase
        end else begin
          tempsig16 = M_index_counter_q;
          M_reg_addresses_index_a = tempsig16;
          M_control_unit_ra_select_signal = 1'h0;
          tempsig16 = M_regfile_radata;
          if (tempsig16[2+0-:1] == 1'h1) begin
            tempsig16 = M_index_counter_q;
            M_btn_status_d[(tempsig16)*1+0-:1] = 1'h1;
            M_bomb_count_d = M_bomb_count_q + 1'h1;
          end else begin
            tempsig16 = M_index_counter_q;
            M_btn_status_d[(tempsig16)*1+0-:1] = 1'h0;
          end
          M_index_counter_d = M_index_counter_q + 1'h1;
          M_state_d = CHECK_state;
        end
      end
      READ_state: begin
        M_seq_counter_d = 1'h0;
        M_regfile_we = 1'h0;
        tempsig16 = M_index_counter_q;
        if (tempsig16 > 4'hf) begin
          M_temp_reg_d = 16'hffff;
          M_index_counter_d = 1'h0;
          M_state_d = GAME_state;
        end else begin
          M_reg_addresses_index_a = tempsig16;
          M_control_unit_ra_select_signal = 1'h0;
          tempsig = M_control_unit_bomb_signal;
          if (tempsig) begin
            
            case (tempsig16)
              4'h0: begin
                M_state_d = READ0SEQ_state;
              end
              4'h1: begin
                M_state_d = READ1SEQ_state;
              end
              4'h2: begin
                M_state_d = READ2SEQ_state;
              end
              4'h3: begin
                M_state_d = READ3SEQ_state;
              end
              4'h4: begin
                M_state_d = READ4SEQ_state;
              end
              4'h5: begin
                M_state_d = READ5SEQ_state;
              end
              4'h6: begin
                M_state_d = READ6SEQ_state;
              end
              4'h7: begin
                M_state_d = READ7SEQ_state;
              end
              4'h8: begin
                M_state_d = READ8SEQ_state;
              end
              4'h9: begin
                M_state_d = READ9SEQ_state;
              end
              4'ha: begin
                M_state_d = READ10SEQ_state;
              end
              4'hb: begin
                M_state_d = READ11SEQ_state;
              end
              4'hc: begin
                M_state_d = READ12SEQ_state;
              end
              4'hd: begin
                M_state_d = READ13SEQ_state;
              end
              4'he: begin
                M_state_d = READ14SEQ_state;
              end
              4'hf: begin
                M_state_d = READ15SEQ_state;
              end
            endcase
          end else begin
            M_index_counter_d = M_index_counter_q + 1'h1;
            M_state_d = READ_state;
          end
        end
      end
      READ0SEQ_state: begin
        M_regfile_we = 1'h0;
        tempsig4 = M_seq_counter_q;
        
        case (tempsig4)
          1'h0: begin
            M_temp_reg_d = 1'h1;
            M_state_d = WRITE_state;
          end
          1'h1: begin
            M_temp_reg_d = 3'h4;
            M_state_d = WRITE_state;
          end
          2'h2: begin
            M_temp_reg_d = 3'h5;
            M_state_d = WRITE_state;
          end
          2'h3: begin
            M_index_counter_d = M_index_counter_q + 1'h1;
            M_state_d = READ_state;
          end
        endcase
      end
      READ1SEQ_state: begin
        M_regfile_we = 1'h0;
        tempsig4 = M_seq_counter_q;
        
        case (tempsig4)
          1'h0: begin
            M_temp_reg_d = 2'h2;
            M_state_d = WRITE_state;
          end
          1'h1: begin
            M_temp_reg_d = 3'h6;
            M_state_d = WRITE_state;
          end
          2'h2: begin
            M_temp_reg_d = 3'h5;
            M_state_d = WRITE_state;
          end
          2'h3: begin
            M_temp_reg_d = 3'h4;
            M_state_d = WRITE_state;
          end
          3'h4: begin
            M_temp_reg_d = 1'h0;
            M_state_d = WRITE_state;
          end
          3'h5: begin
            M_index_counter_d = M_index_counter_q + 1'h1;
            M_state_d = READ_state;
          end
        endcase
      end
      READ2SEQ_state: begin
        M_regfile_we = 1'h0;
        tempsig4 = M_seq_counter_q;
        
        case (tempsig4)
          1'h0: begin
            M_temp_reg_d = 2'h3;
            M_state_d = WRITE_state;
          end
          1'h1: begin
            M_temp_reg_d = 3'h7;
            M_state_d = WRITE_state;
          end
          2'h2: begin
            M_temp_reg_d = 3'h6;
            M_state_d = WRITE_state;
          end
          2'h3: begin
            M_temp_reg_d = 3'h5;
            M_state_d = WRITE_state;
          end
          3'h4: begin
            M_temp_reg_d = 1'h1;
            M_state_d = WRITE_state;
          end
          3'h5: begin
            M_index_counter_d = M_index_counter_q + 1'h1;
            M_state_d = READ_state;
          end
        endcase
      end
      READ3SEQ_state: begin
        M_regfile_we = 1'h0;
        tempsig4 = M_seq_counter_q;
        
        case (tempsig4)
          1'h0: begin
            M_temp_reg_d = 3'h7;
            M_state_d = WRITE_state;
          end
          1'h1: begin
            M_temp_reg_d = 3'h6;
            M_state_d = WRITE_state;
          end
          2'h2: begin
            M_temp_reg_d = 2'h2;
            M_state_d = WRITE_state;
          end
          2'h3: begin
            M_index_counter_d = M_index_counter_q + 1'h1;
            M_state_d = READ_state;
          end
        endcase
      end
      READ4SEQ_state: begin
        M_regfile_we = 1'h0;
        tempsig4 = M_seq_counter_q;
        
        case (tempsig4)
          1'h0: begin
            M_temp_reg_d = 1'h0;
            M_state_d = WRITE_state;
          end
          1'h1: begin
            M_temp_reg_d = 1'h1;
            M_state_d = WRITE_state;
          end
          2'h2: begin
            M_temp_reg_d = 3'h5;
            M_state_d = WRITE_state;
          end
          2'h3: begin
            M_temp_reg_d = 4'h9;
            M_state_d = WRITE_state;
          end
          3'h4: begin
            M_temp_reg_d = 4'h8;
            M_state_d = WRITE_state;
          end
          3'h5: begin
            M_index_counter_d = M_index_counter_q + 1'h1;
            M_state_d = READ_state;
          end
        endcase
      end
      READ5SEQ_state: begin
        M_regfile_we = 1'h0;
        tempsig4 = M_seq_counter_q;
        
        case (tempsig4)
          1'h0: begin
            M_temp_reg_d = 1'h0;
            M_state_d = WRITE_state;
          end
          1'h1: begin
            M_temp_reg_d = 1'h1;
            M_state_d = WRITE_state;
          end
          2'h2: begin
            M_temp_reg_d = 2'h2;
            M_state_d = WRITE_state;
          end
          2'h3: begin
            M_temp_reg_d = 3'h6;
            M_state_d = WRITE_state;
          end
          3'h4: begin
            M_temp_reg_d = 4'ha;
            M_state_d = WRITE_state;
          end
          3'h5: begin
            M_temp_reg_d = 4'h9;
            M_state_d = WRITE_state;
          end
          3'h6: begin
            M_temp_reg_d = 4'h8;
            M_state_d = WRITE_state;
          end
          3'h7: begin
            M_temp_reg_d = 3'h4;
            M_state_d = WRITE_state;
          end
          4'h8: begin
            M_index_counter_d = M_index_counter_q + 1'h1;
            M_state_d = READ_state;
          end
        endcase
      end
      READ6SEQ_state: begin
        M_regfile_we = 1'h0;
        tempsig4 = M_seq_counter_q;
        
        case (tempsig4)
          1'h0: begin
            M_temp_reg_d = 1'h1;
            M_state_d = WRITE_state;
          end
          1'h1: begin
            M_temp_reg_d = 2'h2;
            M_state_d = WRITE_state;
          end
          2'h2: begin
            M_temp_reg_d = 2'h3;
            M_state_d = WRITE_state;
          end
          2'h3: begin
            M_temp_reg_d = 3'h7;
            M_state_d = WRITE_state;
          end
          3'h4: begin
            M_temp_reg_d = 4'hb;
            M_state_d = WRITE_state;
          end
          3'h5: begin
            M_temp_reg_d = 4'ha;
            M_state_d = WRITE_state;
          end
          3'h6: begin
            M_temp_reg_d = 4'h9;
            M_state_d = WRITE_state;
          end
          3'h7: begin
            M_temp_reg_d = 3'h5;
            M_state_d = WRITE_state;
          end
          4'h8: begin
            M_index_counter_d = M_index_counter_q + 1'h1;
            M_state_d = READ_state;
          end
        endcase
      end
      READ7SEQ_state: begin
        M_regfile_we = 1'h0;
        tempsig4 = M_seq_counter_q;
        
        case (tempsig4)
          1'h0: begin
            M_temp_reg_d = 4'hb;
            M_state_d = WRITE_state;
          end
          1'h1: begin
            M_temp_reg_d = 4'ha;
            M_state_d = WRITE_state;
          end
          2'h2: begin
            M_temp_reg_d = 3'h6;
            M_state_d = WRITE_state;
          end
          2'h3: begin
            M_temp_reg_d = 2'h2;
            M_state_d = WRITE_state;
          end
          3'h4: begin
            M_temp_reg_d = 2'h3;
            M_state_d = WRITE_state;
          end
          3'h5: begin
            M_index_counter_d = M_index_counter_q + 1'h1;
            M_state_d = READ_state;
          end
        endcase
      end
      READ8SEQ_state: begin
        M_regfile_we = 1'h0;
        tempsig4 = M_seq_counter_q;
        
        case (tempsig4)
          1'h0: begin
            M_temp_reg_d = 3'h4;
            M_state_d = WRITE_state;
          end
          1'h1: begin
            M_temp_reg_d = 3'h5;
            M_state_d = WRITE_state;
          end
          2'h2: begin
            M_temp_reg_d = 4'h9;
            M_state_d = WRITE_state;
          end
          2'h3: begin
            M_temp_reg_d = 4'hd;
            M_state_d = WRITE_state;
          end
          3'h4: begin
            M_temp_reg_d = 4'hc;
            M_state_d = WRITE_state;
          end
          3'h5: begin
            M_index_counter_d = M_index_counter_q + 1'h1;
            M_state_d = READ_state;
          end
        endcase
      end
      READ9SEQ_state: begin
        M_regfile_we = 1'h0;
        tempsig4 = M_seq_counter_q;
        
        case (tempsig4)
          1'h0: begin
            M_temp_reg_d = 3'h4;
            M_state_d = WRITE_state;
          end
          1'h1: begin
            M_temp_reg_d = 3'h5;
            M_state_d = WRITE_state;
          end
          2'h2: begin
            M_temp_reg_d = 3'h6;
            M_state_d = WRITE_state;
          end
          2'h3: begin
            M_temp_reg_d = 4'ha;
            M_state_d = WRITE_state;
          end
          3'h4: begin
            M_temp_reg_d = 4'he;
            M_state_d = WRITE_state;
          end
          3'h5: begin
            M_temp_reg_d = 4'hd;
            M_state_d = WRITE_state;
          end
          3'h6: begin
            M_temp_reg_d = 4'hc;
            M_state_d = WRITE_state;
          end
          3'h7: begin
            M_temp_reg_d = 4'h8;
            M_state_d = WRITE_state;
          end
          4'h8: begin
            M_index_counter_d = M_index_counter_q + 1'h1;
            M_state_d = READ_state;
          end
        endcase
      end
      READ10SEQ_state: begin
        M_regfile_we = 1'h0;
        tempsig4 = M_seq_counter_q;
        
        case (tempsig4)
          1'h0: begin
            M_temp_reg_d = 3'h5;
            M_state_d = WRITE_state;
          end
          1'h1: begin
            M_temp_reg_d = 3'h6;
            M_state_d = WRITE_state;
          end
          2'h2: begin
            M_temp_reg_d = 3'h7;
            M_state_d = WRITE_state;
          end
          2'h3: begin
            M_temp_reg_d = 4'hb;
            M_state_d = WRITE_state;
          end
          3'h4: begin
            M_temp_reg_d = 4'hf;
            M_state_d = WRITE_state;
          end
          3'h5: begin
            M_temp_reg_d = 4'he;
            M_state_d = WRITE_state;
          end
          3'h6: begin
            M_temp_reg_d = 4'hd;
            M_state_d = WRITE_state;
          end
          3'h7: begin
            M_temp_reg_d = 4'h9;
            M_state_d = WRITE_state;
          end
          4'h8: begin
            M_index_counter_d = M_index_counter_q + 1'h1;
            M_state_d = READ_state;
          end
        endcase
      end
      READ11SEQ_state: begin
        M_regfile_we = 1'h0;
        tempsig4 = M_seq_counter_q;
        
        case (tempsig4)
          1'h0: begin
            M_temp_reg_d = 4'hf;
            M_state_d = WRITE_state;
          end
          1'h1: begin
            M_temp_reg_d = 4'he;
            M_state_d = WRITE_state;
          end
          2'h2: begin
            M_temp_reg_d = 4'ha;
            M_state_d = WRITE_state;
          end
          2'h3: begin
            M_temp_reg_d = 3'h6;
            M_state_d = WRITE_state;
          end
          3'h4: begin
            M_temp_reg_d = 3'h7;
            M_state_d = WRITE_state;
          end
          3'h5: begin
            M_index_counter_d = M_index_counter_q + 1'h1;
            M_state_d = READ_state;
          end
        endcase
      end
      READ12SEQ_state: begin
        M_regfile_we = 1'h0;
        tempsig4 = M_seq_counter_q;
        
        case (tempsig4)
          1'h0: begin
            M_temp_reg_d = 4'h8;
            M_state_d = WRITE_state;
          end
          1'h1: begin
            M_temp_reg_d = 4'h9;
            M_state_d = WRITE_state;
          end
          2'h2: begin
            M_temp_reg_d = 2'h3;
            M_state_d = WRITE_state;
          end
          2'h3: begin
            M_index_counter_d = M_index_counter_q + 1'h1;
            M_state_d = READ_state;
          end
        endcase
      end
      READ13SEQ_state: begin
        M_regfile_we = 1'h0;
        tempsig4 = M_seq_counter_q;
        
        case (tempsig4)
          1'h0: begin
            M_temp_reg_d = 4'h8;
            M_state_d = WRITE_state;
          end
          1'h1: begin
            M_temp_reg_d = 4'h9;
            M_state_d = WRITE_state;
          end
          2'h2: begin
            M_temp_reg_d = 4'ha;
            M_state_d = WRITE_state;
          end
          2'h3: begin
            M_temp_reg_d = 4'he;
            M_state_d = WRITE_state;
          end
          3'h4: begin
            M_temp_reg_d = 4'hc;
            M_state_d = WRITE_state;
          end
          3'h5: begin
            M_index_counter_d = M_index_counter_q + 1'h1;
            M_state_d = READ_state;
          end
        endcase
      end
      READ14SEQ_state: begin
        M_regfile_we = 1'h0;
        tempsig4 = M_seq_counter_q;
        
        case (tempsig4)
          1'h0: begin
            M_temp_reg_d = 4'h9;
            M_state_d = WRITE_state;
          end
          1'h1: begin
            M_temp_reg_d = 4'ha;
            M_state_d = WRITE_state;
          end
          2'h2: begin
            M_temp_reg_d = 4'hb;
            M_state_d = WRITE_state;
          end
          2'h3: begin
            M_temp_reg_d = 4'hf;
            M_state_d = WRITE_state;
          end
          3'h4: begin
            M_temp_reg_d = 4'hd;
            M_state_d = WRITE_state;
          end
          3'h5: begin
            M_index_counter_d = M_index_counter_q + 1'h1;
            M_state_d = READ_state;
          end
        endcase
      end
      READ15SEQ_state: begin
        M_regfile_we = 1'h0;
        tempsig4 = M_seq_counter_q;
        
        case (tempsig4)
          1'h0: begin
            M_temp_reg_d = 4'he;
            M_state_d = WRITE_state;
          end
          1'h1: begin
            M_temp_reg_d = 4'ha;
            M_state_d = WRITE_state;
          end
          2'h2: begin
            M_temp_reg_d = 4'hb;
            M_state_d = WRITE_state;
          end
          2'h3: begin
            M_index_counter_d = M_index_counter_q + 1'h1;
            M_state_d = READ_state;
          end
        endcase
      end
      WRITE_state: begin
        M_reg_addresses_index_a = M_temp_reg_q;
        M_control_unit_ra_select_signal = 1'h0;
        M_asel_asel_signal = 1'h0;
        M_bsel_bsel_signal = 1'h1;
        M_control_unit_bsel_input_select_signal = 2'h2;
        M_alu_alufn = 6'h00;
        M_regfile_we = 1'h1;
        M_wdsel_wdsel_signal = 1'h0;
        M_control_unit_wa_select_signal = 2'h1;
        tempsig4 = M_index_counter_q;
        M_seq_counter_d = M_seq_counter_q + 1'h1;
        
        case (tempsig4)
          1'h0: begin
            M_state_d = READ0SEQ_state;
          end
          1'h1: begin
            M_state_d = READ1SEQ_state;
          end
          2'h2: begin
            M_state_d = READ2SEQ_state;
          end
          2'h3: begin
            M_state_d = READ3SEQ_state;
          end
          3'h4: begin
            M_state_d = READ4SEQ_state;
          end
          3'h5: begin
            M_state_d = READ5SEQ_state;
          end
          3'h6: begin
            M_state_d = READ6SEQ_state;
          end
          3'h7: begin
            M_state_d = READ7SEQ_state;
          end
          4'h8: begin
            M_state_d = READ8SEQ_state;
          end
          4'h9: begin
            M_state_d = READ9SEQ_state;
          end
          4'ha: begin
            M_state_d = READ10SEQ_state;
          end
          4'hb: begin
            M_state_d = READ11SEQ_state;
          end
          4'hc: begin
            M_state_d = READ12SEQ_state;
          end
          4'hd: begin
            M_state_d = READ13SEQ_state;
          end
          4'he: begin
            M_state_d = READ14SEQ_state;
          end
          4'hf: begin
            M_state_d = READ15SEQ_state;
          end
        endcase
      end
      GAME_state: begin
        M_regfile_we = 1'h0;
        if (btn00) begin
          M_reg_addresses_index_a = 1'h0;
          M_temp_reg_d = M_reg_addresses_out_a;
        end else begin
          if (btn01) begin
            M_reg_addresses_index_a = 1'h1;
            M_temp_reg_d = M_reg_addresses_out_a;
          end else begin
            if (btn02) begin
              M_reg_addresses_index_a = 2'h2;
              M_temp_reg_d = M_reg_addresses_out_a;
            end else begin
              if (btn03) begin
                M_reg_addresses_index_a = 2'h3;
                M_temp_reg_d = M_reg_addresses_out_a;
              end else begin
                if (btn10) begin
                  M_reg_addresses_index_a = 3'h4;
                  M_temp_reg_d = M_reg_addresses_out_a;
                end else begin
                  if (btn11) begin
                    M_reg_addresses_index_a = 3'h5;
                    M_temp_reg_d = M_reg_addresses_out_a;
                  end else begin
                    if (btn12) begin
                      M_reg_addresses_index_a = 3'h6;
                      M_temp_reg_d = M_reg_addresses_out_a;
                    end else begin
                      if (btn13) begin
                        M_reg_addresses_index_a = 3'h7;
                        M_temp_reg_d = M_reg_addresses_out_a;
                      end else begin
                        if (btn20) begin
                          M_reg_addresses_index_a = 4'h8;
                          M_temp_reg_d = M_reg_addresses_out_a;
                        end else begin
                          if (btn21) begin
                            M_reg_addresses_index_a = 4'h9;
                            M_temp_reg_d = M_reg_addresses_out_a;
                          end else begin
                            if (btn22) begin
                              M_reg_addresses_index_a = 4'ha;
                              M_temp_reg_d = M_reg_addresses_out_a;
                            end else begin
                              if (btn23) begin
                                M_reg_addresses_index_a = 4'hb;
                                M_temp_reg_d = M_reg_addresses_out_a;
                              end else begin
                                if (btn30) begin
                                  M_reg_addresses_index_a = 4'hc;
                                  M_temp_reg_d = M_reg_addresses_out_a;
                                end else begin
                                  if (btn31) begin
                                    M_reg_addresses_index_a = 4'hd;
                                    M_temp_reg_d = M_reg_addresses_out_a;
                                  end else begin
                                    if (btn32) begin
                                      M_reg_addresses_index_a = 4'he;
                                      M_temp_reg_d = M_reg_addresses_out_a;
                                    end else begin
                                      if (btn33) begin
                                        M_reg_addresses_index_a = 4'hf;
                                        M_temp_reg_d = M_reg_addresses_out_a;
                                      end else begin
                                        M_reg_addresses_index_a = M_temp_reg_q;
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        tempsig16 = M_temp_reg_q;
        if (tempsig16 == 16'hffff) begin
          M_state_d = GAME_state;
        end else begin
          if (M_btn_status_q == 16'hffff) begin
            tempsig4 = M_difficulty_q;
            
            case (tempsig4)
              1'h0: begin
                M_score_d = M_score_q + 1'h1;
              end
              1'h1: begin
                M_score_d = M_score_q + 2'h2;
              end
              2'h2: begin
                M_score_d = M_score_q + 2'h3;
              end
            endcase
            M_state_d = WIN_state;
          end else begin
            M_control_unit_ra_select_signal = 1'h0;
            M_btn_status_d[(tempsig16)*1+0-:1] = 1'h1;
            tempsig = M_regfile_radata[2+0-:1];
            if (tempsig == 1'h1) begin
              M_state_d = LOSS_state;
            end else begin
              led_color = M_regfile_radata[0+1-:2];
              tempsig4 = M_reg_addresses_out_a;
              M_alu_a = 16'h0001;
              M_alu_b = tempsig4;
              M_alu_alufn = 6'h20;
              tempsig16 = M_alu_out;
              
              case (led_color)
                2'h0: begin
                  led_display = {tempsig16, tempsig16, tempsig16};
                end
                2'h1: begin
                  led_display = {16'h0000, tempsig16, 16'h0000};
                end
                2'h2: begin
                  led_display = {tempsig16, 16'h0000, 16'h0000};
                end
                2'h3: begin
                  led_display = {tempsig16, 16'h0000, tempsig16};
                end
                default: begin
                  led_display = {16'h0000, tempsig16, 16'h0000};
                end
              endcase
              ledr0c0R = led_display[0+0+0-:1];
              ledr0c0G = led_display[16+0+0-:1];
              ledr0c0B = led_display[32+0+0-:1];
              ledr0c1R = led_display[0+1+0-:1];
              ledr0c1G = led_display[16+1+0-:1];
              ledr0c1B = led_display[32+1+0-:1];
              ledr0c2R = led_display[0+2+0-:1];
              ledr0c2G = led_display[16+2+0-:1];
              ledr0c2B = led_display[32+2+0-:1];
              ledr0c3R = led_display[0+3+0-:1];
              ledr0c3G = led_display[16+3+0-:1];
              ledr0c3B = led_display[32+3+0-:1];
              ledr1c0R = led_display[0+4+0-:1];
              ledr1c0G = led_display[16+4+0-:1];
              ledr1c0B = led_display[32+4+0-:1];
              ledr1c1R = led_display[0+5+0-:1];
              ledr1c1G = led_display[16+5+0-:1];
              ledr1c1B = led_display[32+5+0-:1];
              ledr1c2R = led_display[0+6+0-:1];
              ledr1c2G = led_display[16+6+0-:1];
              ledr1c2B = led_display[32+6+0-:1];
              ledr1c3R = led_display[0+7+0-:1];
              ledr1c3G = led_display[16+7+0-:1];
              ledr1c3B = led_display[32+7+0-:1];
              ledr2c0R = led_display[0+8+0-:1];
              ledr2c0G = led_display[16+8+0-:1];
              ledr2c0B = led_display[32+8+0-:1];
              ledr2c1R = led_display[0+9+0-:1];
              ledr2c1G = led_display[16+9+0-:1];
              ledr2c1B = led_display[32+9+0-:1];
              ledr2c2R = led_display[0+10+0-:1];
              ledr2c2G = led_display[16+10+0-:1];
              ledr2c2B = led_display[32+10+0-:1];
              ledr2c3R = led_display[0+11+0-:1];
              ledr2c3G = led_display[16+11+0-:1];
              ledr2c3B = led_display[32+11+0-:1];
              ledr3c0R = led_display[0+12+0-:1];
              ledr3c0G = led_display[16+12+0-:1];
              ledr3c0B = led_display[32+12+0-:1];
              ledr3c1R = led_display[0+13+0-:1];
              ledr3c1G = led_display[16+13+0-:1];
              ledr3c1B = led_display[32+13+0-:1];
              ledr3c2R = led_display[0+14+0-:1];
              ledr3c2G = led_display[16+14+0-:1];
              ledr3c2B = led_display[32+14+0-:1];
              ledr3c3R = led_display[0+15+0-:1];
              ledr3c3G = led_display[16+15+0-:1];
              ledr3c3B = led_display[32+15+0-:1];
              M_state_d = GAME_state;
            end
          end
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_index_counter_q <= 1'h0;
      M_seq_counter_q <= 1'h0;
      M_prev_btn_list_q <= 1'h0;
      M_temp_reg_q <= 1'h0;
      M_temp_reg2_q <= 1'h0;
      M_debug_reg_q <= 1'h0;
      M_debug_reg_2_q <= 1'h0;
      M_temp_led_data_q <= 1'h0;
      M_btn_status_q <= 1'h0;
      M_difficulty_q <= 1'h0;
      M_bomb_count_q <= 1'h0;
      M_auto_manual_indicator_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_index_counter_q <= M_index_counter_d;
      M_seq_counter_q <= M_seq_counter_d;
      M_prev_btn_list_q <= M_prev_btn_list_d;
      M_temp_reg_q <= M_temp_reg_d;
      M_temp_reg2_q <= M_temp_reg2_d;
      M_debug_reg_q <= M_debug_reg_d;
      M_debug_reg_2_q <= M_debug_reg_2_d;
      M_temp_led_data_q <= M_temp_led_data_d;
      M_btn_status_q <= M_btn_status_d;
      M_difficulty_q <= M_difficulty_d;
      M_bomb_count_q <= M_bomb_count_d;
      M_auto_manual_indicator_q <= M_auto_manual_indicator_d;
      M_state_q <= M_state_d;
    end
    
    M_seed_q <= M_seed_d;
    M_score_q <= M_score_d;
    M_score_display_q <= M_score_display_d;
  end
  
endmodule
